# -*- coding: utf-8 -*-
"""Store

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xv3RBAYKd6HxzY0y__8qVU6daalpA1Gn
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# customer data set
Df_customer = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/Sales - Customer.csv",encoding='unicode_escape')
Df_customer.head()

# sales data set
Df_sales=pd.read_csv("/content/drive/MyDrive/Colab Notebooks/Sales - Sales.csv",encoding='unicode_escape')
Df_sales.head()

# Inventory data set
Df_inventory=pd.read_csv("/content/drive/MyDrive/Colab Notebooks/Sales - Inventory.csv",encoding='unicode_escape')
Df_inventory.head()

# sales & inventory data set
Df_sales_inventory=pd.merge(Df_sales, Df_inventory, on=['Product ID'])
Df_sales_inventory.head(5)

# sales & inventory data set
Df_sales_customer=pd.merge(Df_sales, Df_customer, on=['Customer ID'])
Df_sales_customer.head()

Df_sales_customer.info()

#check for null values
Df_sales_customer.isnull().sum()

# fill null value with mean
Df_sales_customer['Promotional sales']=Df_sales_customer['Promotional sales'].fillna(Df_sales_customer['Promotional sales'].mean())
Df_sales_customer['Non - Promotional sales']=Df_sales_customer['Non - Promotional sales'].fillna(Df_sales_customer['Non - Promotional sales'].mean())

# Check for null value in Df_sales_inventory dataset
Df_sales_inventory.isnull().sum()

Df_sales_inventory['Promotional sales']=Df_sales_customer['Promotional sales'].fillna(Df_sales_customer['Promotional sales'].mean())
Df_sales_inventory['Non - Promotional sales']=Df_sales_customer['Non - Promotional sales'].fillna(Df_sales_customer['Non - Promotional sales'].mean())

# Convert the date column to date format
Df_sales["Order Date"] = pd.to_datetime(Df_sales["Order Date"])

Df_sales.info()

# line chart sales by week number
weeknum_revenue = Df_sales.groupby(['WeekNum'],as_index=False)['Revenue'].sum()
ax=sns.lineplot(x="WeekNum", y="Revenue", data=weeknum_revenue)


weeknum_sales=Df_sales.groupby(['WeekNum'],as_index=False)['Sales'].sum()
sns.lineplot(x='WeekNum',y='Sales',data=weeknum_sales)

# stcked bar chart sales by sub_category
sales_by_sub_category = Df_sales.groupby(['Sub-Category'],as_index=False)['Sales'].sum().sort_values(by='Sales',ascending=False)
ax=sns.barplot(y='Sub-Category',x='Sales',data=sales_by_sub_category)

for bars in ax.containers:
  ax.bar_label(bars)


plt.xlabel('Sum of Sales',color='g',weight='bold',style='italic')
plt.ylabel('Sub-Category',color='g',weight='bold',style='italic')

# month from Order Date
Df_sales['month'] = pd.DatetimeIndex(Df_sales['Order Date']).month

# Converting month number to month name
import calendar
Df_sales['month'] = Df_sales['month'].apply(lambda x: calendar.month_abbr[x])

Df_sales.head()

# Line and stacked column chart month wise promotional sales
psales_by_month = Df_sales.groupby(['month'],as_index=False)['Promotional sales'].sum()
ax=sns.barplot(x='month',y='Promotional sales',data=psales_by_month)

Npsales_by_month = Df_sales.groupby(['month'],as_index=False)['Non - Promotional sales'].sum()
# cmap = plt.colormaps["tab20c"]

# outer_colors = cmap(np.arange(3)*4)
sns.barplot(x='month',y='Non - Promotional sales',data=Npsales_by_month)

#  line chart calculate percentage of promotional sales
psales_by_month['percentage']=Df_sales['Promotional sales']/psales_by_month['Promotional sales'].sum()*100
sns.lineplot(x='month',y='percentage',data=psales_by_month)

# for bars in ax.containers:
#   ax.bar_label(bars)
# plt.figure(figsize=(12,1))

# line and clustor column chart to show sub_category label sales growth
sales_by_sub_category = Df_sales.groupby(['Sub-Category'],as_index=False)['Sales'].sum().sort_values(by='Sales',ascending=False)
ax=sns.barplot(x='Sub-Category',y='Sales',data=sales_by_sub_category)

for bars in ax.containers:
  ax.bar_label(bars)


sales_growth_by_sub_category=Df_sales.groupby(['Sub-Category'],as_index=False)['% sales growth'].sum()

sns.lineplot(x='Sub-Category',y='% sales growth',data=sales_growth_by_sub_category)


plt.xlabel('Sum of Sales',color='g',weight='bold',style='italic')
plt.ylabel('Sub-Category',color='g',weight='bold',style='italic')

# scatter chart sum of Quantity by sum of sales
sns.scatterplot(x='Quantity',y='Sales',data=Df_sales)

# sales by region
sales_by_region=Df_sales.groupby(['Region'],as_index=False)['Sales'].sum().sort_values(by="Sales",ascending=False)
sns.barplot(x='Region',y='Sales',data=sales_by_region)

"""Customer dashboard"""

Df_sales_customer.info()

# Pie chart age Group by customer
age_group_by_customer=Df_sales_customer.groupby(['age group'],as_index=False)['Customer ID'].count()
# D_sales['Amount'] = D_sales['Amount'].astype('int32')

Bp=plt.pie(data=age_group_by_customer,x='Customer ID',startangle=0,textprops={'size': 'smaller'}, radius=1
           ,wedgeprops={'linewidth':1,'edgecolor':"k"})

#donut chart
circle=plt.Circle(xy=(0,0),radius=.75,facecolor='white')
plt.gca().add_artist(circle)
plt.show()

# covert month no to month name
Df_sales_customer['month'] = pd.DatetimeIndex(Df_sales_customer['Order Date']).month
import calendar
Df_sales_customer['month'] = Df_sales_customer['month'].apply(lambda x: calendar.month_abbr[x])
Df_sales_customer.head(2)

# Stacked bar  chart to show monthly sales by age group
# species = (
#     "Adelie\n $\\mu=$3700.66g",
#     "Chinstrap\n $\\mu=$3733.09g",
#     "Gentoo\n $\\mu=5076.02g$",
# )




x = pd.pivot_table(Df_sales_customer, index='month', columns='age group', values='Sales',aggfunc=sum)

# plot data in stack manner of bar type
x = x.reset_index()
x.plot(x='month', kind='bar', stacked=True)
plt.show()



# extract month column to data frame from Df_sales
df_month=Df_sales['month'].unique()
df_month

# Skatter bar chart to show monthly sales by age group
df_scatter=Df_sales_customer.groupby(['month','age group'],as_index=False)['Sales'].sum()
sns.barplot(x='month',y='Sales',hue='age group',data=df_scatter)

# Total Customer
Total_cutomers=Df_sales_customer['Customer ID'].nunique()
Total_cutomers

# Stacked column chart to show monthly sales by week number
y=pd.pivot_table(Df_sales_customer,index='WeekNum',columns='age group',values='Sales',aggfunc=sum).reset_index()




y.plot(x='WeekNum',kind='bar',stacked=True)

# Convert dataframe to csv
y.to_csv('y.csv')

!pip install squarify

# Tree map
import squarify
Df_tree=Df_sales_customer.groupby(['Customer Name'],as_index=False)['Sales'].sum()

# squarify.plot(sizes=Df_tree['Sales'],label=Df_tree['Customer Name'],
#               color=sns.color_palette("Spectral",
#                                      len(Df_tree)),)
# plt.axis("off")



# select top 20 pokemons from 3 columns
# and sort them by Total Strength
top6 = Df_tree.loc[:, ["Customer Name",
                           'Sales']].sort_values(
    by="Sales", ascending=False)[:6]

# create a plot figure with figsize
plt.figure(figsize=(12, 6))
# we don't require the axis values so lets remove it
plt.axis("off")
axis = squarify.plot(top6['Customer Name'].value_counts(),
                     label=top6['Customer Name'].value_counts().index,
                     color=sns.color_palette("tab20", len(
                         top6['Customer Name'].value_counts())),
                     pad=1,
                     text_kwargs={'fontsize': 18})
axis.set_title("Primary Data Types Of Top6 Customers", fontsize=24)

